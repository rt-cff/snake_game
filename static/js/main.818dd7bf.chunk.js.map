{"version":3,"sources":["context/util.js","context/SnakeContext.js","context/create.context.helper.js","hooks/useInterval.js","components/Container.js","components/Cell.js","components/Row.js","components/App.js","index.js"],"names":["DIRECTION","randomFoodPosition","snake","x","Math","floor","random","y","length","some","s","moveUtil","state","direct","lastDirect","dirIndex","indexOf","slice","initialState","food","foodExist","stop","lastLocation","reducer","type","payload","actionTypes","CHANGE_DIRECTION","changeDirectionUtil","newDirect","lastPendingDirect","abs","MOVE","CREATE_FOOD","EAT_FOOD","STOP","RESET","CHECK_STATUS","CHECK_FOOD_STATUS","actions","Context","createContext","Provider","children","useReducer","dispatch","boundActions","useMemo","getActions","key","console","log","value","useContext","_useContext","createContextHelper","changeDirection","move","createFood","eatFood","last_location","setStop","reset","checkStatus","checkFoodStatus","useInterval","cb","delay","savedCallback","useRef","useEffect","current","id","setInterval","tick","clearInterval","Container","ref","useSnakeContext","containerRef","useImperativeHandle","focus","onKeyDownHandler","useCallback","keyCode","includes","onTick","tabIndex","onKeyDown","className","displayName","React","forwardRef","memo","Cell","active","head","Row","yaxis","row","_range","map","getRow","getRowProps","_food","props","filter","inital","GameMsgComponent","onConfirm","msgObj","msg","btnTitle","onClick","GameMsg","App","SnakeContext","createRef","rows","getRows","r","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.818dd7bf.chunk.js","sourcesContent":["export const DIRECTION = [\"left\", \"top\", \"right\", \"down\"];\r\n/*\r\n\tLeft & Right Directiocn is at index 0 & 2 and have x value change at index - 1 per interval\r\n\tTop & Down Directiocn is at index 1 & 3 and have y value change at index - 2 per interval\r\n*/\r\n\r\nexport const randomFoodPosition = (snake = []) => {\r\n\tconst x = Math.floor(Math.random() * 14), y = Math.floor(Math.random() * 11);\r\n\t\r\n\tif(snake.length >= 14 * 11 - 1)\r\n\t\tthrow('No More Available Space')\r\n\r\n\treturn snake.some(s => s.x === x && s.y === y) ? randomFoodPosition(snake) : {x, y}\r\n};\r\n\r\nexport const moveUtil = (state) => {\r\n\tconst { direct, lastDirect, snake } = state;\r\n\tlet { x, y } = snake[0];\r\n\tconst dirIndex = DIRECTION.indexOf(direct[0] || lastDirect);\r\n\r\n\tif(dirIndex % 2 === 0) \r\n\t\tx += dirIndex - 1;\r\n\telse \r\n\t\ty += dirIndex - 2;\r\n\r\n\treturn [{ x, y }, ...snake.slice(0, -1)]\r\n}\r\n\r\nexport const changeDirectionUtil = (state, newDirect) => {\r\n\tconst {direct, lastDirect} = state\r\n\tconst lastPendingDirect = direct.slice(-1)[0] || lastDirect\r\n\r\n\treturn (lastPendingDirect === newDirect || Math.abs(DIRECTION.indexOf(newDirect) - DIRECTION.indexOf(lastPendingDirect)) === 2) ? state : { ...state, direct: [...state.direct, newDirect] };\r\n}","import createContextHelper from \"./create.context.helper\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nimport {DIRECTION, randomFoodPosition, moveUtil, changeDirectionUtil} from './util'\r\n\r\nconst initialState = {\r\n\tsnake: [{ x: 6, y: 5 }],\r\n\tdirect: [DIRECTION[1]],\r\n\tlastDirect: DIRECTION[1], \r\n\tfood: randomFoodPosition([{ x: 6, y: 5 }]),\r\n\tfoodExist: false,\r\n\tstop: true, \r\n\tlastLocation: {}\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n\tswitch (type) {\r\n\t\tcase actionTypes.CHANGE_DIRECTION:\r\n\t\t\tif(state.stop) \r\n\t\t\t\treturn state\r\n\r\n\t\t\t//return original state if same direction or opposite direction\r\n\t\t\t// return (state.direct[0] === payload || Math.abs(DIRECTION.indexOf(payload) - DIRECTION.indexOf(state.direct[0])) === 2) ? state : { ...state, direct: [...state.direct, payload] };\r\n\t\t\treturn changeDirectionUtil(state, payload)\r\n\t\tcase actionTypes.MOVE:\r\n\t\t\treturn { ...state, snake: moveUtil(state), lastLocation: state.snake.slice(-1)[0], direct: state.direct.slice(1), lastDirect: state.direct[0] || state.lastDirect};\r\n\t\tcase actionTypes.CREATE_FOOD:\r\n\t\t\treturn { ...state, food: randomFoodPosition(state.snake), foodExist: true }\r\n\t\tcase actionTypes.EAT_FOOD:\r\n\t\t\treturn { ...state, ...payload, snake: [...state.snake, payload], foodExist: false };\r\n\t\tcase actionTypes.STOP:\r\n\t\t\treturn { ...state, stop: true };\r\n\t\tcase actionTypes.RESET:\r\n\t\t\t//do no reset if the game is running\r\n\t\t\treturn state.stop ? { ...initialState, stop: false } : state;\r\n\t\tcase actionTypes.CHECK_STATUS:\r\n\t\t\tif (\r\n\t\t\t\tstate.snake[0].x < 0 ||\r\n\t\t\t\tstate.snake[0].y < 0 ||\r\n\t\t\t\tstate.snake[0].x > 13 ||\r\n\t\t\t\tstate.snake[0].y > 10 ||\r\n\t\t\t\tstate.snake.slice(1).some(s => s.x === state.snake[0].x && s.y === state.snake[0].y)\r\n\t\t\t) return { ...state, stop: true }\r\n\t\t\treturn state\r\n\t\tcase actionTypes.CHECK_FOOD_STATUS:\r\n\t\t\tif(state.snake[0].x === state.food.x && state.snake[0].y === state.food.y)\r\n\t\t\t\treturn { \r\n\t\t\t\t\t...state, \r\n\t\t\t\t\tsnake: [...state.snake, state.lastLocation], \r\n\t\t\t\t\tfood: randomFoodPosition(state.snake), \r\n\t\t\t\t\tfoodExist: true\r\n\t\t\t\t}\r\n\t\t\telse \r\n\t\t\t\treturn state\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst move = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.MOVE\r\n\t});\r\n};\r\n\r\nconst changeDirection = (dispatch) => (direct) => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.CHANGE_DIRECTION,\r\n\t\tpayload: DIRECTION[direct]\r\n\t});\r\n};\r\n\r\nconst createFood = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.CREATE_FOOD,\r\n\t});\r\n};\r\n\r\nconst eatFood = (dispatch) => (last_location) => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.EAT_FOOD,\r\n\t\tpayload: last_location\r\n\t});\r\n};\r\n\r\nconst setStop = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.STOP\r\n\t});\r\n};\r\n\r\nconst reset = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.RESET\r\n\t});\r\n};\r\n\r\nconst checkStatus = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.CHECK_STATUS\r\n\t})\r\n}\r\n\r\nconst checkFoodStatus = (dispatch) => () => {\r\n\tdispatch({\r\n\t\ttype: actionTypes.CHECK_FOOD_STATUS\r\n\t})\r\n}\r\n\r\nexport const { Context, Provider, useContext } = createContextHelper(\r\n\t(...p) => {\r\n\t\tconst state = reducer(...p)\r\n\t\tconsole.log('Reducer State ', state)\r\n\t\treturn state\r\n\t},\r\n\t{ changeDirection, move, createFood, eatFood, setStop, reset, checkStatus, checkFoodStatus },\r\n\tinitialState\r\n);\r\n\r\nconst actionTypes = {\r\n\tMOVE: \"MOVE\",\r\n\tCHANGE_DIRECTION: \"CHANGE_DIRECTION\",\r\n\tCREATE_FOOD: \"CREATE_FOOD\",\r\n\tEAT_FOOD: \"EAT_FOOD\",\r\n\tSTOP: \"STOP\",\r\n\tRESET: \"RESET\", \r\n\tCHECK_STATUS: \"CHECK_STATUS\", \r\n\tCHECK_FOOD_STATUS: \"CHECK_FOOD_STATUS\", \r\n};","import React, { createContext, useReducer, useContext, useCallback, useMemo } from \"react\";\r\n\r\nconst getActions = (actions, dispatch, state) => {\r\n\tconst boundActions = {}\r\n\t\r\n\tfor (let key in actions) {\r\n\t\t// boundActions[key] = actions[key](dispatch, state);\r\n\r\n\t\tboundActions[key] = (...p) => {\r\n\t\t\tconsole.log('Actions Dispatch: ', key)\r\n\t\t\tactions[key](dispatch)(...p)\r\n\t\t};\r\n\t}\r\n\r\n\treturn boundActions\r\n}\r\n\r\nexport default (reducer, actions, initialState) => {\r\n\tconst Context = createContext();\r\n\r\n\tconst Provider = ({ children }) => {\r\n\t\tconst [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n\t\tconst boundActions = useMemo(() => getActions(actions, dispatch), [actions, dispatch]);\r\n\t\t// const boundActions = getActions(actions, dispatch, state);\r\nconsole.log('here', children)\r\n\t\treturn (\r\n\t\t\t<Context.Provider value={{ state, ...boundActions }}>\r\n\t\t\t\t{children}\r\n\t\t\t</Context.Provider>\r\n\t\t);\r\n\t};\r\n\r\n\tconst _useContext = () => useContext(Context)\r\n\r\n\treturn { Context, Provider, useContext: _useContext };\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nconst useInterval = (cb, delay) => {\r\n\tconst savedCallback = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = cb;\r\n\t}, [cb]);\r\n\r\n\tuseEffect(() => {\r\n\t\tfunction tick() {\r\n\t\t\tsavedCallback.current();\r\n\t\t}\r\n\r\n\t\tif (delay !== null) {\r\n\t\t\tlet id = setInterval(tick, delay);\r\n\t\t\treturn () => clearInterval(id);\r\n\t\t}\r\n\t}, [delay]);\r\n};\r\n\r\nexport default useInterval;\r\n","import React, { useContext, useState, useEffect, useCallback, useRef, useImperativeHandle } from \"react\";\r\nimport { Context as SnakeContext, useContext as useSnakeContext } from \"../context/SnakeContext\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport _ from \"lodash\";\r\n\r\nlet LAST_LOCATION = {};\r\n\r\nconst Container = ({ children }, ref) => {\r\n\tconst {\r\n\t\tstate: { snake, foodExist, food, stop },\r\n\t\tchangeDirection,\r\n\t\tmove,\r\n\t\tcreateFood,\r\n\t\teatFood,\r\n\t\tsetStop,\r\n\t\treset, \r\n\t\tcheckStatus, \r\n\t\tcheckFoodStatus\r\n\t// } = useContext(SnakeContext);\r\n\t} = useSnakeContext();\r\n\tconst containerRef = useRef();\r\n\r\n\tuseImperativeHandle(ref, () => ({\r\n\t  focus: () => {\r\n\t\tcontainerRef.current.focus();\r\n\t  }\r\n\t}));\r\n\r\n\tconst onKeyDownHandler = useCallback(({ keyCode }) => {\r\n\t\tif (keyCode === 13) \r\n\t\t\treset();\r\n\r\n\t\tif([37, 38, 39, 40].includes(keyCode))\r\n\t\t\tchangeDirection(keyCode - 37);\r\n\t}, [reset, changeDirection]);\r\n\r\n\tconst onTick = useCallback(() => {\r\n\t\tmove()\r\n\t\tcheckStatus()\r\n\t\tcheckFoodStatus()\r\n\t}, [move, checkStatus, checkFoodStatus])\r\n\r\n\tuseInterval(onTick, !stop ? 250 : null);\r\n\r\n\treturn (\r\n\t\t<div id='container' ref={containerRef} tabIndex=\"0\" onKeyDown={onKeyDownHandler} className=\"body\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"score\">Your Score: {snake.length - 1}</div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nContainer.displayName = 'Container'\r\n\r\nexport default React.forwardRef(Container);\r\n","import React from \"react\";\r\n\r\nconst Cell = ({ active, head, food }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`cell ${active ? \"active\" : \"\"} ${head ? \"head\" : \"\"} ${food ? \"food\" : \"\"}`}\r\n\t\t></div>\r\n\t);\r\n};\r\n\r\nexport default React.memo(Cell);\r\n","import React, {useContext, useMemo} from \"react\";\r\nimport { Context as SnakeContext, useContext as useSnakeContext } from '../context/SnakeContext'\r\nimport Cell from \"./Cell\";\r\n\r\nimport _range from 'lodash/range'\r\n\r\nexport const getRowProps = (snake, _food, x, y) => {\r\n\tconst props = {}\r\n\t\r\n\tprops.active = snake.filter(s => s.y === y).map(s => s.x).includes(x)\r\n\tprops.head = snake[0].y === y ? snake[0].x === x : false\r\n\tprops.food =  _food.y === y ? _food.x === x : false\r\n\r\n\treturn props\r\n}\r\n\r\nexport const getRow = (snake, food, y) => x => {\r\n\treturn <Cell key={x} {...getRowProps(snake, food, x, y)}/>\r\n}\r\n\r\nconst Row = ({ yaxis: y }) => {\r\n\t// const { state: { snake, food } } = useContext(SnakeContext)\r\n\tconst { state: { snake, food } } = useSnakeContext()\r\n\tconst row = useMemo(() => _range(14).map(getRow(snake, food, y)), [snake, food, y])\r\n\r\n\treturn <div className=\"row\">{row}</div>\r\n}\r\n\r\nexport default Row;","import React, { useState, useContext, useEffect, useMemo } from \"react\";\r\nimport { Context as SnakeContext } from \"../context/SnakeContext\";\r\nimport \"./css/style.css\";\r\nimport Container from \"./Container\";\r\nimport Row from \"./Row\";\r\n\r\nimport _range from 'lodash/range'\r\n\r\nlet inital = 0\r\n\r\nconst GameMsgComponent = ({stop, onConfirm}) => {\r\n\tconst msgObj = inital === 0 ? {msg: 'Welcome', btnTitle: 'Start'} : {msg: 'GameOver', btnTitle: 'Reset'}\r\n\r\n\tinital++\r\n\r\n\tif(!stop) return null\r\n\r\n\treturn (\r\n\t\t<div className=\"msg\">\r\n\t\t\t<div className=\"msg-bg\" />\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"msg-title\">{msgObj.msg}</div>\r\n\t\t\t\t<button onClick={onConfirm} className=\"msg-btn\">\r\n\t\t\t\t\t{msgObj.btnTitle}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nGameMsgComponent.displayName = 'GameMsg'\r\n\r\nconst GameMsg = React.memo(GameMsgComponent)\r\n\r\nconst getRows = (rows) => {\r\n\tconsole.log('memo')\r\n\treturn _range(rows).map(r => <Row key = {r} yaxis = {r} />)\r\n}\r\n\r\nlet prev = null\r\n\r\nconst App = () => {\r\n\tconst {\r\n\t\tstate: { stop },\r\n\t\treset\r\n\t} = useContext(SnakeContext);\r\n\tconst containerRef = React.createRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tcontainerRef.current.focus()\r\n\t}, [])\r\n\r\n\tconst rows = useMemo(() => getRows(11), [])\r\n\r\n\treturn (\r\n\t\t<Container ref={containerRef}>\r\n\t\t\t<GameMsg stop = {stop} onConfirm = {reset}/>\r\n\t\t\t{rows}\t\t\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider as SnakeProvider } from \"./context/SnakeContext\";\r\n\r\nReactDOM.render(\r\n\t<SnakeProvider>\r\n\t\t<App />\r\n\t</SnakeProvider>,\r\n\tdocument.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}